{
  "active": false,
  "connections": {
    "Create Page": {
      "main": [
        [
          {
            "node": "Initiate UdemySummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execution Data": {
      "main": [
        [
          {
            "node": "JobType Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JobType Router": {
      "main": [
        [
          {
            "node": "Set Initial Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "UdemySummary Control",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summaries": {
      "main": [
        [
          {
            "node": "Set Current Step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Stop ?": {
      "main": [
        [
          {
            "node": "Format Result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Next Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "UdemySummary Control",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tags to Items": {
      "main": [
        [
          {
            "node": "Notion Block Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML to Array": {
      "main": [
        [
          {
            "node": "Tags to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Block Generator": {
      "main": [
        [
          {
            "node": "Parse JSON blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Notion Block Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON blocks": {
      "main": [
        [
          {
            "node": "Valid Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Blocks": {
      "main": [
        [
          {
            "node": "For Each Block...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Block...": {
      "main": [
        [
          {
            "node": "Add page cover image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add blocks to Notion Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Create Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Result": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Current Step": {
      "main": [
        [
          {
            "node": "Should Stop ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to HTML": {
      "main": [
        [
          {
            "node": "HTML to Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Add blocks to Notion Page": {
      "main": [
        [
          {
            "node": "For Each Block...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate UdemySummary": {
      "main": [
        []
      ]
    },
    "UdemySummary Subworkflow": {
      "main": [
        [
          {
            "node": "Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Next Transcript": {
      "main": [
        [
          {
            "node": "Generate Summaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Initial Transcript": {
      "main": [
        [
          {
            "node": "Generate Summaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UdemySummary Control": {
      "main": [
        [
          {
            "node": "Convert to HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-16T15:26:28.850Z",
  "id": "U7BPeL1dh0KFg0KZ",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Udemy Summary",
  "nodes": [
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $json.parentPageUrl }}",
          "mode": "url"
        },
        "title": "={{ $('Set Variables').item.json.chapter }}",
        "options": {
          "icon": "={{ $json.pageIcon }}"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1740,
        -140
      ],
      "id": "c27bcab8-2974-4d16-9ece-0e6f1194efb7",
      "name": "Create Page",
      "credentials": {
        "notionApi": {
          "id": "6bjg4ALH6fniuwyE",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "pageId",
              "value": "={{ $json.pageId }}"
            },
            {
              "key": "jobType",
              "value": "={{ $json.jobType }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        200,
        940
      ],
      "id": "7e2f27eb-e22d-4c12-ae0b-4d6b7f74c932",
      "name": "Execution Data"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "initiate",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8b33c762-5b1c-41c1-829e-d8ef9c903e79"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "adebb414-35eb-4694-b494-c7a713c2572b",
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "summaries",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "193fc70b-dd38-4fc7-be56-cafb5b3cf62e",
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "report",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        420,
        940
      ],
      "id": "654ac2db-ec29-4c0d-aeca-e00010227efd",
      "name": "JobType Router"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "pageId": "={{ $json.pageId }}",
            "data": "={{ $json.data }}",
            "jobType": "={{ $json.jobType }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "pageId",
              "displayName": "pageId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "jobType",
              "displayName": "jobType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "id": "a0f37de9-44ec-4824-b640-09029665e947",
      "name": "Generate Report",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1980,
        240
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "pageId": "={{ $('JobType Router').first().json.pageId }}",
            "data": "={{ $json }}",
            "jobType": "summaries"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "pageId",
              "displayName": "pageId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object"
            },
            {
              "id": "jobType",
              "displayName": "jobType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "de2050ab-04e2-4398-8e96-0524554ee94c",
      "name": "Generate Summaries",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1020,
        340
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "75d18d88-6ba6-43df-bef7-3e8ad99ad8bd",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.currentStep >= $('JobType Router').first().json.data.transcripts.length }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4589cefe-0c05-4d95-bff5-4e6eef48a570",
      "name": "Should Stop ?",
      "type": "n8n-nodes-base.if",
      "position": [
        1420,
        340
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Etant donné le chapitre suivant: <chapter>{{ $json.transcript.parseJson().title }}</chapter>, génere la leçon à partir de la transcription: <transcription>{{ $json.transcript.parseJson().content }}</transcription>\n\n** Très important **\n- Assure toi de respecter scrupuleusement le format de sortie attendu.\n- Ecris en français. Traduis également le titre du chapire (sauf les termes techniques).\n- Retourne moi uniquement la partie mentionné dans l'étape et rien d'autre. Contente toi de résumer ce que l'instructeur indique dans la transcription et **n'invente rien** !\n\nFormat de sortie (strictement en JSON):\n{\n  \"modelName\": \"gpt\",\n  \"content\": \"Le résumé de l'étape\"\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.systemPrompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1080,
        780
      ],
      "id": "30488868-7310-4a40-baf5-5e59b3867b65",
      "name": "AI Agent",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1080,
        940
      ],
      "id": "ae172d81-f908-4c35-b87d-c9a5de004dac",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "PmqmzdRFH1SO1Yvi",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"modelName\": \"name\",\n  \"content\": \"Le résumé de l'étape\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1320,
        940
      ],
      "id": "2fe866a2-ab1c-4259-aef5-73ee51ef6a3e",
      "name": "Structured Output Parser",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8329cf5f-9642-4de1-b0cf-9c10ab94e2fc",
              "name": "systemPrompt",
              "value": "=# 🎬 Prompt pour Résumer des Vidéos Udemy (Chapitre par Chapitre)\n\n## 🎯 Contexte  \nTu es un **professeur spécialisé en programmation informatique**.  \nTa mission est de **résumer efficacement le contenu d'une vidéo Udemy** sur le thème de {{ $json.data.theme }}, en mettant en avant les **concepts clés**, les **termes techniques** et des **exemples de code** pertinents.\n\n\n## 📝 Instructions  \n\nUtilise les **règles suivantes** pour générer un résumé structuré à partir du **transcript** de la vidéo.\nLa leçon doit être en langue **française**.\nL'utilisateur te fournira le **titre du chapitre** ainsi que sa **transcription** dans chacun de ses prompts.\n\n---\n\n## Format de sortie  \n\n### 🏷 Titre de la section  \n- Utilise `#` suivi du **titre de la section**.\n\n### 🔑 Idées clés\n- Détaille **7 points maximum** sous forme de bullet points `-` en identifiant les **concepts clés** du chapitre.  \n- Si un **terme technique** est mentionné dans la **transcription**,, ne le **traduis pas** et mets-le en **évidence avec des backticks (`)`**.\n- Ex. :  \n  > - Utilisation de `async/await` pour gérer les promesses en JavaScript.  \n  > - Différence entre `let`, `const` et `var` en ES6.  \n\n### 💻 Exemples de Code  \n- Si un **exemple de code** est mentionné, fournis-le **dans un bloc de code Markdown (` ``` `)**.  \n- **Langage du code** → déduis-le du sujet. **Mais attention il est très important que le langage soit dans la liste des langages supportés par Notion**: abap, agda, arduino, ascii art, assembly, bash, basic, bnf, c, c#, c++, clojure, coffeescript, coq, css, dart, dhall, diff, ebnf, elixir, elm, erlang, f#, flow, fortran, gherkin, glsl, go, graphql, groovy, haskell, hcl, html, idris, java, javascript, json, julia, kotlin, latex, less, lisp, livescript, llvm ir, lua, makefile, markdown, markup, matlab, mathematica, mermaid, nix, objective-c, ocaml, pascal, perl, php, plain text, powershell, prolog, protobuf, purescript, python, r, racket, reason, ruby, rust, sass, scala, scheme, scss, shell, smalltalk, solidity, sql, swift, toml, typescript, vb.net, verilog, vhdl, visual basic, webassembly, xml, yaml, notionscript.\n- Si tu ne sais pas quoi mettre utilise Shell ou Bash par défaut.\n- IMPORTANT: Pour le code Docker, utilise TOUJOURS \"bash\" comme identifiant de langage, JAMAIS \"dockerfile\".\n- N'indique pas comme titre \"Exemples de Code\". Contente toi de donner l'exemple dans un bloc de code.\n- **Exemple** :\n  \n  ```python\n  def hello_world():\n      print(\"Hello, World!\")\n  ```\n\nTa réponse doit être EXACTEMENT dans ce format JSON, sans aucun texte avant ou après :\n\n{\n  \"modelName\": \"nom du modele\",\n  \"content\": \"# Titre de la section\\n\\n- Point 1\\n- Point 2\\n\\n```langage\\ncode ici\\n```\"\n}\n\nNotes importantes sur le format :\n- Le titre principal commence par un seul #\n- Les points clés sont listés directement avec des tirets (-) sans titre \"Points Clés\" ou \"### Points Clés\"\n- Les exemples de code sont inclus directement dans des blocs de code (```) sans titre \"Exemples de Code\"\n\n---\n\n## 📌 Structuration et mise en forme recommandées  \n\n- **Sections principales (H1 `##`)** → Suivent les grandes étapes de la fiche  \n- **Sous-sections (optionnel) (H3 `###`)** → Détail des éléments de chaque étape. Uniquement si nécessaire pour diviser un chapitre en plusieurs parties. Inutile pour les petits\n- **Listes à puces** → Pour les idées clés\n- **Bacticks (``) -> Pour les termes techniques\n- **Bloc de code** → Pour illustrer par des exemples\n\n---\n\n🎯 **Objectif final** : Obtenir un résumé **clair, synthétique et lisible** de chaque vidéo Udemy, facilitant la révision et l'apprentissage du contenu.",
              "type": "string"
            },
            {
              "id": "8ec2711a-c778-4d2f-ab26-08d6696964a6",
              "name": "transcript",
              "value": "={{ $('JobType Router').first().json.data.transcript }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        820,
        940
      ],
      "id": "940c5eca-c939-43b2-ae72-9115d730a203",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Etant donné le chapitre suivant: <chapter>{{ $json.transcript.parseJson().title }}</chapter>, génere la leçon à partir de la transcription: <transcription>{{ $json.transcript.parseJson().content }}</transcription>\n\n** Très important **\n- Assure toi de respecter scrupuleusement le format de sortie attendu.\n- Ecris en français. Traduis également le titre du chapire (sauf les termes techniques).\n- Retourne moi uniquement la partie mentionné dans l'étape et rien d'autre. Contente toi de résumer ce que l'instructeur indique dans la transcription et **n'invente rien** !\n\nFormat de sortie (strictement en JSON):\n{\n  \"modelName\": \"claude\",\n  \"content\": \"Le résumé de l'étape\"\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.systemPrompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1080,
        1080
      ],
      "id": "0c59c535-edea-4932-a352-8e30bd41e804",
      "name": "AI Agent1",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        1080,
        1240
      ],
      "id": "83cdf1b6-4a9f-4aab-b02d-c75a3bd89ec7",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "yeLIK0R1OKDySeyH",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1580,
        920
      ],
      "id": "28585432-f193-44b6-9882-5856077d8e65",
      "name": "Merge"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        840,
        1600
      ],
      "id": "11c2ffd9-ff17-499a-b183-d41ea31ab59c",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "PmqmzdRFH1SO1Yvi",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "tag",
        "options": {}
      },
      "id": "18eda98d-8547-4a74-86c7-e85a1559477b",
      "name": "Tags to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1500,
        1680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $('UdemySummary Control').item.json.text }}",
        "options": {
          "tables": true
        }
      },
      "id": "7587f776-6d6f-463d-ab08-4ba07cca47bb",
      "name": "Convert to HTML",
      "type": "n8n-nodes-base.markdown",
      "position": [
        1240,
        1460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "851b8a3f-c2d3-41ad-bf60-4e0e667f6c58",
              "name": "tag",
              "type": "array",
              "value": "={{ $json.data.match(/<div style=\"display: flex[^>]*>[\\s\\S]*?<\\/div>|<h[1-3][^>]*>[\\s\\S]*?(?=<h[1-3]|$)/g) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d94f6c04-b46e-4347-b2a0-09a5bb680d94",
      "name": "HTML to Array",
      "type": "n8n-nodes-base.set",
      "position": [
        1500,
        1460
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.tag.trim() }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Convertis le HTML suivant en son équivalent de Bloc Notion selon le schéma API de Notion.\n* Assure-toi que le contenu est toujours inclus et reste le même.\n* Renvoie uniquement une réponse JSON.\n* Génère des blocs de niveau enfant. Ne définis pas de propriété \"parent\" ou \"children\".\n* Privilégie fortement les titres, paragraphes, tableaux et des blocs de listes.\n* Les titres disponibles sont heading_1, heading_2 et heading_3 - h4, h5, h6 doivent utiliser le type heading_3 à la place. Assure-toi que les titres utilisent la définition de texte enrichi.\n* Assure-toi que les blocs de listes incluent tous les éléments de la liste.\n\n## Exemples\n\n1. Titres\n```\n<h3 id=\"references\">References</h3>\n```\nse convertirait en\n```\n{\"object\":  \"block\", \"type\": \"heading_3\", \"heading_3\": { \"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"References\"}}]}}\n```\n\n2. Listes\n```\n<ul><li>hello</li><li>world</li></ul>\n```\nse convertirait en\n```\n[\n{\n  \"object\": \"block\",\n  \"type\": \"bulleted_list_item\",\n  \"bulleted_list_item\": {\"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"hello\"}}]}\n},\n{\n  \"object\": \"block\",\n  \"type\": \"bulleted_list_item\",\n  \"bulleted_list_item\": {\"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"world\"}}]}\n}\n]\n```\n\n3. Tableaux\n```\n<table>\n  <thead>\n    <tr><th>Technology</th><th>Potential Impact</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5G Connectivity</td><td>Enables faster data speeds and advanced apps</td>\n    </tr>\n  </tbody>\n</table>\n```\nse convertirait en\n```\n{\n  \"object\": \"block\",\n  \"type\": \"table\",\n  \"table\": {\n    \"table_width\": 2,\n    \"has_column_header\": true,\n    \"has_row_header\": false,\n    \"children\": [\n      {\n        \"object\": \"block\",\n        \"type\": \"table_row\",\n        \"table_row\": {\n          \"cells\": [\n            [\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Technology\",\n                  \"link\": null\n                }\n              },\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Potential Impact\",\n                  \"link\": null\n                }\n              }\n            ],\n            [\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"5G Connectivity\",\n                  \"link\": null\n                }\n              },\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Enables faster data speeds and advanced apps\",\n                  \"link\": null\n                }\n              }\n            ]\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n4. Liens d'ancrage\nPuisque Notion ne prend pas en charge les liens d'ancrage, convertis-les simplement en blocs de texte enrichi à la place.\n```\n<a href=\"#module-0-pre-course-setup-and-learning-principles\">Module 0: Pre-Course Setup and Learning Principles</a>\n```\nse convertit en\n```\n{\n  \"object\": \"block\",\n  \"type\": \"paragraph\",\n  \"paragraph\": {\n    \"rich_text\": [\n      {\n        \"type\": \"text\",\n        \"text\": {\n          \"content\": \"Module 0: Pre-Course Setup and Learning Principles\"\n        }\n      }\n    ]\n  }\n}\n```\n\n5. Parties HTML invalides\nLorsque le HTML n'est pas syntaxiquement valide, par ex. des balises de fermeture orphelines, ignore simplement la conversion et utilise un bloc de texte enrichi vide.\n```\n</li>\\n</ol>\n```\npeut être remplacé par\n```\n{\n  \"object\": \"block\",\n  \"type\": \"paragraph\",\n  \"paragraph\": {\n    \"rich_text\": [\n      {\n        \"type\": \"text\",\n        \"text\": {\n          \"content\": \" \"\n        }\n      }\n    ]\n  }\n}\n```\n\n6. Blocs de code\nLorsque tu vois des blocs de code.\n\n```html\n<pre><code class=\"language-javascript\">function hello() {\n  console.log(\"Hello world!\");\n}</code></pre>\n```\nse convertirait en\n```json\n{\n  \"object\": \"block\",\n  \"type\": \"code\",\n  \"code\": {\n    \"rich_text\": [{\n      \"type\": \"text\",\n      \"text\": {\n        \"content\": \"function hello() {\\n  console.log(\\\"Hello world!\\\");\\n}\"\n      }\n    }],\n    \"language\": \"javascript\"\n  }\n}\n```\n\nNotes importantes pour les blocs de code :\n- La propriété `language` est optionnelle, elle peut être déduite de la classe `language-xxx` dans le HTML\n- Les langages supportés par Notion incluent : abap, arduino, bash, basic, c, clojure, coffeescript, c++, c#, css, dart, diff, docker, elixir, elm, erlang, flow, fortran, f#, gherkin, glsl, go, graphql, groovy, haskell, html, java, javascript, json, julia, kotlin, latex, less, lisp, livescript, lua, makefile, markdown, markup, matlab, mermaid, nix, objective-c, ocaml, pascal, perl, php, plain text, powershell, prolog, protobuf, python, r, reason, ruby, rust, sass, scala, scheme, scss, shell, sql, swift, typescript, vb.net, verilog, vhdl, visual basic, webassembly, xml, yaml\n- Si aucun langage n'est spécifié ou si le langage n'est pas supporté, Notion utilisera \"plain text\" par défaut\n\nInformation importante pour les termes techniques qui sont marqués en backticks:\nDans l'API Notion, le code inline est géré via l'annotation `code: true` dans le `rich_text`. C'est différent des blocs de code qui utilisent le type `code`. Cette distinction est importante car :\n- Les backticks simples (`) doivent générer du texte avec `annotations.code = true`\n- Les blocs de code (```) doivent générer des blocs de type `code`"
            }
          ]
        }
      },
      "id": "6ad9ea2b-d4b4-4e05-89e9-5f6dbfaddaa4",
      "name": "Notion Block Generator",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1780,
        1460
      ],
      "typeVersion": 1.5
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "id": "3e3d0959-6878-417c-821b-1efcdf44ba8e",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1800,
        1600
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "og4gMnGbp8Uy7toF",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "73fcb8a0-2672-4bd5-86de-8075e1e02baf",
              "name": "=block",
              "type": "array",
              "value": "={{\n(function(){\n  // Nettoyage complet du texte JSON\n  const cleanedJson = $json.text\n    .replace(/```json/g, '')\n    .replace(/```/g, '')\n    .replace(/\\n\\s*/g, ' ')\n    .trim();\n  \n  // Parse le JSON nettoyé\n  let blocks = cleanedJson.parseJson();\n  blocks = Array.isArray(blocks) ? blocks : [blocks];\n  \n  // Filtrer tout bloc vide potentiel ou paragraphe contenant uniquement des espaces\n  blocks = blocks.filter(block => {\n    if (block.type === 'paragraph' && \n        block.paragraph.rich_text.length === 1 && \n        block.paragraph.rich_text[0].text.content.trim() === '') {\n      return false;\n    }\n    return true;\n  });\n  \n  return blocks;\n})()\n}}"
            }
          ]
        },
        "options": {}
      },
      "id": "2469cb35-d7d1-4896-9735-7a3c7d89e6ad",
      "name": "Parse JSON blocks",
      "type": "n8n-nodes-base.set",
      "position": [
        2100,
        1460
      ],
      "executeOnce": false,
      "typeVersion": 3.4,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "f68cefe0-e109-4d41-9aa3-043f3bc6c449",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "54f7750c-a63e-4aed-9f9e-5cf8e3dbea13",
      "name": "Valid Blocks",
      "type": "n8n-nodes-base.filter",
      "position": [
        2100,
        1680
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "5cf5bb63-ff00-4d2e-9757-9a1f44a380f9",
      "name": "For Each Block...",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        2380,
        1460
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56340b31-7474-4542-8c90-7b00673767a0",
              "name": "theme",
              "value": "={{ $json.theme }}",
              "type": "string"
            },
            {
              "id": "ba0e4ddf-16fc-4a30-851e-d7d1c55c0e24",
              "name": "parentPageUrl",
              "value": "https://www.notion.so/Docker-Kubernetes-1c782fe264068042b5bcc609b92fa561",
              "type": "string"
            },
            {
              "id": "1f7f828a-f256-4a35-8687-936bc75ad7e0",
              "name": "pageIcon",
              "value": "🚢",
              "type": "string"
            },
            {
              "id": "b413f2dd-e8fb-40db-a62c-aaebdfea6a85",
              "name": "chapter",
              "value": "={{ $json.chapter }}",
              "type": "string"
            },
            {
              "id": "9aee7906-3504-452b-8893-2167fb6509d1",
              "name": "transcripts",
              "value": "={{ $json.sections }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        -140
      ],
      "id": "02dff566-150b-4384-b34c-19f07107e116",
      "name": "Set Variables"
    },
    {
      "parameters": {
        "jsCode": "const length = $('JobType Router').first().json.data.transcripts.length;\nconst theme = $('JobType Router').first().json.data.theme;\nconst chapter = $('JobType Router').first().json.data.chapter;\n\nreturn {\n  pageId: $('JobType Router').first().json.pageId,\n  jobType: \"report\",\n  data: {\n    theme: `${theme}`,\n    chapter: `${chapter}`,\n    summaries: Array(length)\n      .fill(0)\n      .flatMap((_, i) => {\n        try {\n          const results = $('Generate Summaries').all(0, i);\n          if (results && results.length > 0) {\n            return [{\n              step: i + 1,\n              summary: results.map(item => {\n                // Parse the output string to get the JSON object\n                const parsedOutput = JSON.parse(item.json.output);\n                return {\n                  modelName: parsedOutput.modelName,\n                  content: parsedOutput.content\n                };\n              })\n            }];\n          }\n          return [];\n        } catch (e) {\n          return [];\n        }\n      })\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        240
      ],
      "id": "3ae7c26a-9f75-408b-9a9a-d0f084caea91",
      "name": "Format Result"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d1d3e13-452a-4bf5-8402-ee6450e2bfdb",
              "name": "currentStep",
              "value": "={{ $runIndex + 1 }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "5810db1b-82b4-4480-9d49-f81a60a28d2c",
      "name": "Set Current Step",
      "type": "n8n-nodes-base.set",
      "position": [
        1220,
        340
      ],
      "executeOnce": true,
      "typeVersion": 3.4,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/blocks/{{ $('JobType Router').first().json.pageId }}/children",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"children\": $json.block\n  }\n}}",
        "options": {
          "timeout": "={{ 1000 * 60 }}"
        }
      },
      "id": "0ace2728-1d59-4bd3-aa89-2ee825f75a3b",
      "name": "Add blocks to Notion Page",
      "type": "n8n-nodes-base.httpRequest",
      "maxTries": 2,
      "position": [
        2840,
        1620
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "waitBetweenTries": 3000,
      "credentials": {
        "notionApi": {
          "id": "6bjg4ALH6fniuwyE",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/pages/{{ $('JobType Router').first().json.pageId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"cover\":{\n      \"type\": \"external\",\n      \"external\": {\n        \"url\": \"https://images.unsplash.com/photo-1605745341075-1b7460b99df8?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb&w=6000\"\n      }\n    }\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2840,
        1440
      ],
      "id": "14936708-8523-41f5-987b-2493400e6616",
      "name": "Add page cover image",
      "retryOnFail": false,
      "maxTries": 3,
      "credentials": {
        "notionApi": {
          "id": "6bjg4ALH6fniuwyE",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return {\n    \"theme\": \"Docker & Kubernetes\",\n  \"chapter\": \"Construire une application multi-container\",\n  \"sections\": [\n    {\n      \"title\": \"Our target app & setup\",\n      \"content\": \"<v Narrator>So here's what we're going to build.</v>I will show you the code and the project in actionin a second as well.But here's the theoryabout the project we're going to build.We will have three main building blocksand that will be our database,our MongoDB database to be precisewhich of course is there to store datagenerated by our application.But then we also have two other building blocks.We got a backend web app.We got our Node.js REST API and that is just a web server,a web application built with Node.js which actually exposesno graphical user interface which doesn't respondwith HTML or anything like that,but which simply accepts and returns JSON dataso very similar to the application we builtin the last course section.But now here's an extra building blockwhich we didn't have in the last course section.We will also have a front end web applicationbuilt with React.To be precise, a single page application built with React.Now you may or may not know what exactlya REST API or a single page application is.I will show you how the things work togetherin just a second.In general though, this is a pretty common setupor a pretty common way of building a modern web applicationand it's pretty common to split it like this,to have a database and to then have backend web serverwhich is not directly usedby the end users visiting your website,but instead you have this front end web applicationwhich is responsible for bringing somethingon to the screen of your users so which is responsiblefor rendering the actual HTML code they seeand then it's this front end which talks to the backendbecause we will have some communicationbetween these building blocks.Our backend will talk to our databaseto store and fetch dataand our front end web application will talk to our backendand therefore indirectly of course also to our database.Not directly though.Now that was a first look at this project in theory.Here it is in action and of course you find this code.Attached you find this project attached to this lecture.I'm going to run it here.You might not be able to run itbecause you also need MongoDB to be installed on your systemand to be running and I do have it here,but you don't need to do thatjust as in the last course sectionbecause we are going to dockerize it anyways.But I'll quickly show you what we're going to build.So for that I will first of all go into this backend folderwhich contains a Node.js applicationbuilt with Node and Expressand this application in the endjust takes in a couple of requeststhat allow users to set and see and delete goalsbecause we're going to build a demo application herewhere users can track their goalsfor this course for example.And here we got all the logicfor adding, deleting and getting goalsand these goals are then stored in a database.In addition I also got some logging set up herewhere some log files are written into a logs folder.Now that's the backend.The front end is a React application.React is a JavaScript library which runs in the browser,not on a server.Node runs on a server.React, this JavaScript code runs in a browserand this React applicationis detached from the backend here.It's a stand alone web applicationwhich can be hosted on a stand alone serverwhich just communicates to this backend API though.Here in this front end React codein this App.js file for example,I got some React code which you don't need to understandin order to follow along.You don't need to know React or Node to follow along,but in case you do know React,what I'm doing here is I'm just sending a requestto my backend API so to this backend serverto get the goals stored by a useror also to add a new goal there or to delete a goal.And that's basically what this application does.Now to get started,I'll navigate into my backend folder hereand with npm install,I can now install all the backend dependenciesas specified in this package.json fileso all the third party packages and librariesrequired by this backend project,by this backend Node web API.And thereafter I can run node app.jsto bring up this backend API serverand for this I need to have my MongoDB databaseup and running which I do off screen here.Now in a second terminal I'll navigateinto the front end folder and there we also need to installdependencies needed by this front end.It's a detached project, a detached application.It has its own dependencies as specifiedin its package.json fileand now these dependencies are installed here.And once they are installed,we can also start this front end web applicationwhich again just to emphasize this again,by default is detached from the backend.It is actually started with a development serverbuilt into this front end project setupwhich hosts this React single page applicationand this front end development server which it ishas nothing to do with this backend API servercreated by our Node code here.So we have two separate development servers,two separate web servers hererunning in backend and front end.We start the one in the front end folder with npm start.This executes one of the scripts in package.json.This starts script and that usessome third party package under the hoodto bring up a development serverwhich serves this React application.And thereafter I can visit this running React applicationon localhost 3000 and again that's just a React app.The Node API is running on a different port.This is running on port 80 because that's the portI'm listening to when this application gets spun up,when this server gets spun up.Now if everything works,we should be able to add goals like learn Docker hereand then it gets added hereand if I reload this page,this data gets fetched automaticallyand I can also click it to delete it and then it's goneand all of that works with that combinationof front end React app talking to this backend Node serverwhich then in turn talks to my database.And therefore for these three building blockswhich we have here,we also have different requirements or important thingswe have to keep in mind,especially when we thinkabout dockerizing these building blocks.We're going to dockerize it together,but you can also do this in advance as a practice,especially the database and backend partbecause we already did that in the last sectionso that should be somethingyou can try on your own for sure.But we will also dockerize the front end here.And now what's important to keep in mindwhen you do dockerize thisis that for the database container,if you put MongoDB into a container,the data of course should persist.It should not be lost if the MongoDB containeris removed and then recreated.And in the last course section, that did happen.There we did lose data so that's somethingwe need to do better in this section.In addition we might wanna restrict accessand it turns out that the official Mongo imageactually gives us a way of adding a user and a passwordto the database which is createdin that Mongo image and container.So we're going to look into that in this module as well.Now for our Node backend API, data also must persist.And in case you're wondering which data,I'm not talking about the goals.These are getting stored in the MongoDB databaseso that's not something the Node API needs to persist,but I'm talking about these log files which are written.These are actual files written to this logs folderand they are into this fileand this file should not be deletedwhen this backend is dockerized and in a containerjust because the container was removed.So we wanna ensure that we also persistthat log data on our backend API.Now an additional requirement which we might have herefor convenient developmentis that source code changes should instantly be reflectedand currently that's not really the case.We will need a different third party package for thatwhich we also already saw early in the courseand we'll need a way of exposing our source codeto the container such that the latest source codewhich we have in our development folder on the host machineis always immediately available to the container appwithout rebuilding the image and restarting the container.That is something we also already covered in this courseand we're going to do it again here.And for the front end application, the React application,it turns out that we also want to have these live updateswhen our source code changes.So that is what we're going to build.Definitely a lot of things to coverand definitely also not super easy,but you can try it on your ownbecause in the end it's all things we already did,but of course applying it all in one project herewill be challenging.Nonetheless try it on your own if you want to.See how far you're able to, well to go,see how far you're able to get thereand then let's do it together starting in the next lectureand let's dockerize this entire applicationby putting each service into a separate containerand ensuring that all these containerscan work together without problems.\"\n    },\n    {\n      \"title\": \"Dockerizing the mongodb service\",\n      \"content\": \"<v Narrator>So let's get started.</v>We get these three building blocks the database,the backend API node serverand this frontend react application.Now, I will start with the MongoDB database.For that I shut down my locally installed MongoDB database,which was running off screen.And I will open a new terminal here.I still have my node and my react application running.So that still works.Node and react is still running.But now I opened a new terminalwhere I wanna spin up a container for MongoDBto which we then can talk from our backend node API here.And for this,I'm going to use the official Mongo image againwhich you find on Docker Hub.And I already mentioned that we learn how we can use itin the documentation here.Now we can start by simply running docker run mongo.This image is availablesince it's an official Docker Hub registered image.And this would spin up a container based on this image.Now I will give my container a name, mongodb maybe.And I will also ensurethat it's removed automatically if it's stopped.And I will run it in detached mode.Now, that's the most basic formof starting this MongoDB container.And that's essentially what we also did in the last module.There, we also added a network.But I'll come back to that later.Now, this would start this database.But especially if my backend hereand my frontend is not dockerized yet,I wanna do one additional thing here.I wanna publish one of the ports made availableby this Mongo image.Because as long as the backend API is not dockerized,this API, this node API,still talks to the database here when it connectsas if it would be running on my local host machine.Now if we spin up a Docker containercontaining the database,for this to work, I need to expose this port 27017from my Docker container to my local machine.So that our services can connect to itthrough my local machine.And that's something we can do on this Mongo image.Actually, if you search for 27017which is the default MongoDB port,you'll see that this image actually in the endexposes this port.So what we can do without any issues here,is we can expose this port on the same porton our local host machine.And with that,we can ensure that MongoDB runs in a container.But our locally running backend,which currently is not dockerized yet,will still be able to talk to it.So that's the command I wanna run.To ensure that it works,I'll first of all run docker container pruneto remove all stopped containersto ensure I don't have any old MongoDB containerslying around.And thereafter, I'll run this command.And with docker ps,we there after see this container to be up and running.And now I will go back to my other terminalwhere the node API is running.With control+ C, we can stop this or I can stop this here.You probably don't have it up and running.But I can stop this here.We're soon going to dockerize it as well.And I can then restart it with node app.js.And it successfully connects to MongoDB,even though I shut down my locally installed MongoDB.And that means that indeed, it must have connectedto this MongoDB container we started here.And we can have a look thereby looking into the logs of this MongoDB container.And this is quite hard to read here for sure.But actually, if we read through this,well, huge amount of lines here, we see that somethingbased on the (indistinct) has connected here.And that's indeed my local node application.So that's working. We now dockerized does MongoDB database.\"\n    },\n    {\n      \"title\": \"Dockerizing the Node app\",\n      \"content\": \"<v Instructor>Before we ensure that data persists</v>and so on, let's continue with the backend,let's also dockerize that.For this I'll go to the terminalwhere I have my node server running,and I will again quit it with control C,and now I want to put this into a container.For this, we need to write our own Docker file,to build our own image for this project.We didn't need to do this for MongoDB,because we already have this official image,which starts database,but of course,there's no official image for our own custom application.Now, here we start with from,and we use the node as a base image.We could also add the 14 tag to use version 14or node like this to use the latest version.Next, I will set the working directoryto a directory of my choice,and I will go with app,which I used a lot throughout this course,but you can use any other folder here of course.Thereafter, we wanna copy the package .json file,into this working directoryand then run the npm install commandto install all required dependencies of this project.There after we can copy the remaining codein our host machine project folderto this working directory in the container,and then also expose the port used by this application.And in app.js we can see that is port 80,so therefore I wanna expose port 80 here.Now last but not least,we specify the command that should be executedwhen this container starts based on this image,and there for the moment I wanna execute app.js,with the node runtime.Which is available because we're usingthe node base image.Now that's my Docker file for this backend here,nothing too fancy.It's basically what we did over and over againthroughout this module,and it is a quite straightforward Docker filefor a node application.Now, with that edit, we can now build an image.And for this, first of all,I'm going to run Docker image prune -ato remove all unused images I have on my systemto clean up everything there,and there after with Docker build dotwe can build this image.I'll give it a tag of goal,goals node, that's my image name here.And this will now build this backend imagebased on this Docker file,and since I cleared all images,it starts by downloading the node imageand then it will go through these instructions,creating all those layers,and it will create my own custom image here,which we then thereafter can use to spin up our containerfor this backend.So let's wait for this image creation to finish.Here we go. It is finished.And now with that finished,we can run a container based on this newly created image.So I will add a container or I will run a container,giving it a name of goals, backend, maybe,and run a deleting it when it gets stoppedand running it in detached mode.Actually, initially I'll not run it in detached mode,I'll just run it like this.And if I now hit Enter,we will see that this actually starts up.And initially it looks like everything works,but after a couple of seconds, it actually crashes here.And it crashes because it failed to connect to MongoDB.And that makes a lot of sense herebecause we have MongoDB running in a containerexposing its port,but in the dockerized backend application,I am reaching out to local host.And that now,since this application is now inside of a container,means that I'm trying to accesssome other service on this portinside of that same backend container,not on my host machine.You'll learn about that in the networking module.And there you'll also learn how you can solve that.There is a special alternative domain or address,which you should use hereand that's host.docker.internal.That's a special address, a special identifier,which is translated to your real local host machine IPby Docker.So if we do that with this MongoDB container,still up and running, which it is, if we do that,we should be able to launch this.So for this, first of all,I will rebuild this image since I changed the source code,so let's do that,and there after, I will run this container again, like that.And now this looks better,now we get disconnected to MongoDB log message,which proves that indeed, this did connect.So our backend is now dockerized,it's in a container and it's able to talk to MongoDB,but at this point, we'll have a new problem.The React frontend applicationwill not be able to talk to this backend.If I go back to my running React application,if a reload, I get this error, \\\"something went wrong.\\\"And if I opened the developer tools in the browser,I see that I got this \\\"connection refused\\\" error.Indeed, the react application fails to talk to the backendbecause whilst the backend is running in a container now,we're not publishing the ports which it exposes.And therefore,the frontend trying to talk to this backend applicationon specific ports fails.Now we do have this expose instruction in the Docker fileof the backend application,but as you learned, this alone doesn't do much.Instead, you need to publish the portsthat should be available on your local host machinewhen you run a container.So therefore here in a new terminal,I'll list the running containers,and I will stop the goals backend container,which we just startedso that we can restart itbut this time with the correct ports being published.So now that it's stopped,we can again run this goals backend container,but now I will run it in detached mode by adding -dand very important with the -p optionto publish the internal port 80,which is exposed by this containerand which is the port on which the applicationis listening inside of the containerto my local host, port 80.And with this, we start this container again,and it is now up and running.And now the React application,which currently is not dockerized yet,will be able to talk to this backend.So if I now reload, this error is gone,and now we should also be able to add a goal,and if I reload, it's still there.So now two of three partsare dockerized only the frontend is missing.\"\n    },\n    {\n      \"title\": \"Moving the React SPA into a container\",\n      \"content\": \"<v ->So let's work on that frontend next,</v>before we thereafter ensure that data persists,and source code is updated live.Let's work on dockerizing this frontend application.And that's of course something new,which we haven't done before in this course.It is, however, not that difficult.I will stop my running NPM start processin this frontend folder,and in order to dockerize this,here, I also need to write a docker file.Because I need my own instructions again,there is no official image for this specific application.Now, in order to dockerize it,you need some basic knowledgeabout this React project setup.Otherwise it's hard.Which is why I mentioned that dockerizing thiswould definitely be harder and optional,and why you should start with backend and MongoDB.Because you need to know that this frontend setup,in the end, depends on Node.It's not a Node application, but it uses Nodeto spin up this development server,which serves this React application,and Node is also used to optimize the React codewhich you write and to transform it into codethe browser understands.Now, this is just how React projects typically are setup,and that's why our docker file, in the the frontend folder,also needs to be based on Node as a base image.Not because we write Node code ourselves,but because this project setup requires Node.As a next step, I will also setup a working directory here,and we can also name this app,since it is a totally different containerthan the backend, there will be no clash.So I will go with app here as well,but you could also use as different name.Next, we also got dependencies here,so we should copy package.json into the working directory,and then run NPM install.This does not differ from the backend.It's basically the same.Now thereafter, I also want to copy the remaining codeinto my working directory here.And once that is done, I want to specify a commandwhich should be triggered whenever we create a containerbased on this image.And here it's not Node running a file,but it's NPM start.Running this start scriptin this frontend package.json file.This then uses one of the installed dependenciesto spin up that development server which hosts thisReact application during development.We'll talk about deployment later in this course.Now, this application also exposes a port.We don't see it directly, but by default it's port 3000,and you could see this before, here,when I tested this application locally on my host machine.So therefore, I want to document this, and add expose 3000to this docker file.Now, that should be it.That's a basic docker file for this React application.If we now save this, we can also docker build this file,and give it a tag, and I will name it goals react.Hit enter, and now build this docker file.So now there's also starts, goes through all these steps,installs all the dependencies,which for this project can take a bit longer.You can ignore any warnings you get here, that's no problem.And after a while this will eventually finish,and we'll then have this frontend applicationinside a docker image as well.So let's wait for this image creationto finish and to be done with.And you will note that this takes quite some time,but eventually, it's done.And now with this done we can run a container.We can run a container based onthis goals react image we just built,give the container a name of goals frontend maybe,remove it when it's stopped,run it in detached mode if we want to,and, very important,publish the internally exposed port 3000on the local host port 3000so that we can still enter this here in the browserand view this application as it's runningon the development server.So let's hit enter.With docker PS, we can see that goals reactis a running container now.And hence if I now reload local host 3000,I should see this application.But actually I don't.And if I run docker PS again,I indeed see it's not running anymore.So something seems to go wrong here.And in order to see what that is, I will rerun itbut now not in detached mode, but instead in attached mode,so that I can see all the logs.So let's try this again.And you see it's starting the development server here,so that seems to work.But thereafter it seems to stop.Because thereafter I can already seeit's not running anymore.Now why is our container stoppingimmediately after this development server was spun up?Now that's something specific to this React project'ssetup here.You need to run it in interactive mode,by adding the dash IT option to the docker run commandso that you don't just start the containerand be done with it, but that you let the container knowthat you want to be able to also enter commandsand interact with it.We're not actually going to do that,but the React project is set up the waythat if it doesn't receive this input,this input trigger you could say,it immediately stops the serverbecause no one's interested anyways.I guess that's kind of the logic there.So we need to add dash IT here.And if I now run this,now this starts up, starts the development server,and now this looks much better.And if we now reload local host 3000,here's my application.Now the goal I entered before is missingbecause I restarted the MongoDB container in the meanwhile,but otherwise our goal we added before would still be there.And if I add a new goal here, you see that works,and if I reload it's also fetched again.So, now, this application is dockerized as well,and the frontend is also running in its own container.And that's already a great first step.We put all three building blocks into their own containers.Now, let's polish this setup though,and let's add all the extra features we need in reality.Like for example, persisting data.But also communication between these containers.Actually, we can see that they clearly are ableto communicate, but they all communicate with each otherthrough our local host machinebecause we always publish their ports.This works, but it's even betterif we put them all into one network.And then they can automatically communicate with each otherjust through their container names,as you learned in the last course section.So therefore I'll stop all these containers here.With control C we can get out of this input modeon the React container.And then it shuts down automatically as I explainedif it loses this input signal.And it will also stop the goals backend container here,and I will also stop the MongoDB container.So I'll stop all three containers,so that at the end here, once we're done,we've got no running container.And because they all have the dash dash RM flag,we've also got no stopped containers.And now, let's again restart them,but let's insure we put them into one and the same network.\"\n    },\n    {\n      \"title\": \"Adding Docker Networks for efficient cross-container communication\",\n      \"content\": \"<v Instructor>For this first of all,</v>with Docker network LS, we can list DOA level networks.And here I got this network from the last course sectionbut I wanna create a new network for this application,for this demo here.So, we can do this with docker network createand then give it any name of our choiceand I'll name it, goals, or goals-net for network.Hit Enter and this network is created.With the network created,we can now start the different containers again,but now put them all into that network.And I will start hereby running this mongodb container again.Now, we no longer need to publish this portbecause if containers are in the same networkthey can communicate with each other anyways.My local host machine will not be ableto talk to this container through its local host addressif the port is not published.But that's no problembecause I don't intend on doing that anyways.It's enough for me if the free containerscan talk to each other.So, instead of publishing the port,I'll add --network and run this containerin the goals net network here.Like this.So, now this is starting up and it's up and running here.So that's the mongodb databasewhich is now part of this network.Let's continue with the backend.Here's our command for running this backend container,and again, we don't need to publish this port here,we can just add --network goals-net.And this will now run this containerin this network as well.However, before we do that,let's think about that for a second.Is this all we need to do?Well, keep in mind that this backend node applicationconnects to mongodb and it does thaton host.docker internal.Now this will fail now because we just started mongodbwithout publishing the port,instead in its own network in the goals net network.Host docker internal refers to our local host machine thoughand there this port will no longer be availablebecause we're not publishing it anymore,on the started mongodb container.Instead here, we should use mongodb,the name of that container,which is part of the same network.So, we need to adjust this code in our backend folder firstand thereafter, we can run this container.Now that of course means that for the moment at least,we need to build this image againand give it this tag of goals-node.Build this image again, now with the updated source codewhere we use the mongodb container nameand once that is done,only then it makes sense to now run docker runwith that network being used.So, with --network goals-net.And now this will start this backend container attachedto the same network as the mongodb container,and therefore using the name of that mongodb containerwill work and docker will be able to connect the two.So, for now hit Enter, this starts and with docker PS,we see both containers being up and running.And of course, make sure you're using the right name herein your node code.This really needs to be the name of your mongodb container.So, now we've got these two containers up and running.What about react now?Well, for react, it's quite the same.There we also need to adjust the code first of all.In the front end, source folder and there in App JS.And all the places where I reach out to local host,this now needs to be the nameof my node application container.And that was goals-backend.This name here which I assignedfor starting this goals backend container.That is what we should use here as an address,as a domain you could say,because that can be resolved by dockerto the IP address of our node backend container,if we run all containers in the same network.So, that's what we should do herein App JS and the front end folderand therefore just as before,at the moment we still need to rebuild this image.So, with docker build-t goals react.,I'm going to rebuild this image.And again, this takes a short while here,especially the copy step takes pretty longbecause they still have node modules hereand they are also getting here, they are also getting copiedinto the container again, and for the front end project,this is a huge folder,but we'll take care about optimizing this later.For the moment it takes a while, but it works.And thereafter we can run this container again.Now, however, by also putting it into the same network.Nonetheless, I still wanna publish my port herebecause I still also want to interact with this appfrom my local host machine,so that we can test it in the browser here.But I will also add --network and add this to goals net.So that this container is also part of the same networkand is able to communicate with the other containers.So, let's hit Enter here and let's waitfor this development server to start up,and then let's reload.And we get a problem here.Error name not resolved.Now, what is the problem here?Why is this not working?Well, this is tricky at first,but it makes a lot of sense if you know how react worksand if you keep in mind and understandthat all the front end react code here,this JavaScript code, is actually runningin the browser, not on some server.And that's a key difference compared to this node code.This is executed by the node runtime on the server,directly in the container.For react, that's different, there, we just run NPM start,which does only one thing, it starts a development server,which serves this basic react application.The react code however,is not executed inside of the container.This always runs in the browser.And that means that our nice code herewhere we reach out to goals backend,does not run in the container where docker would be ableto translate this, it runs in the browserand the browser has no idea what goals backend should be.And that is not a bug or anything like that.This is just related to what react is and where it helps usand that with it you build applicationsthat run in the browser, not on the server.And therefore using the container names here,is simply not an option because this code hereis not executed in a docker container,it's running in a browser.The only thing which is running in a docker container here,is the development server, serving this application,but that's not enough.So, what should we do here then?Well, we should go back to local hostin our react application code, because this is an addressit will be able to communicate to,our local machine.This is a address the browser will understand.And it's all about the browser here,because again, this code is executed by the browser.So, local host is an identifier the browser understands.And with that changed back, we need to ensurethat on local host, these end points can be reached.And that simply means, that we still need to publish port 80on the backend application, so that that applicationis also still available on local host,because our front end application needs that access.Because of the way react works,and because of the fact that react applicationshave browser site JavaScript code, and not JavaScript codethat runs inside of the docker container.If that would be different,if we had a second node applicationthat needs to talk to the first one,then we could use the container name.But since this is a JavaScript code running in the browser,we need code which the browser understands, not docker.So, long story short, I changed this codeand we can stop this container with Control + C.We can then rebuild this image,basically rebuilding the same image we had before,but I wanted to show you this important case here.And once this is rebuilt, we can restart this containerand we don't need the --network option herebecause this is an optionwhich doesn't make sense here anyways,because the part which runs in the container,the development server, doesn't care about the network,it doesn't interact with the node API or the database.And the part that would interact with the APIis not executed in the docker environment.So, there's no need to add the network here,instead we run this front end container as we did before.But now we also need to go back to the terminalwhere we started the backend container.Here, we should stop this goals-backend container.Make sure you stop this goals backend node container,and then we should restart it, but we should ensurethat we still publish port 80.So, we run our docker run command againfor the goals backend.And we still need the network here,because the node API still also talks to mongodb.And we wanna use a network here,so that we can use the mongodb name here in our node code.And here it works, because this code executes directlyin the docker container.So, here docker is able to help us.But I also still want to publish port 80 on port 80on the local host machine,so that our separate react applicationis able to talk to that.So, let's run this.Let's verify that all containers are up and runningand then let's reload the react app.And now it works and I can learn docker, reloadand everything is here.So, we got these free containers up and runningand we got them working with each other.And especially for react it was a bit tricky,because the code doesn't run in the container,but it runs in the browser.And then docker is not able to help uswith this automatic host IP resolving.I hope I could explain why that isand how we can mitigate it.But we're not done at this point, we got our containersand we got them talking to each other,but we got these other things which we wanna add.Data persistence, limited accessand life source code updates, which are reflectedin the running containers.So therefore, that is what we'll focus on next.\"\n    },\n    {\n      \"title\": \"Adding data persistence to mongodb with volumes\",\n      \"content\": \"<v Instructor>So let's start working on the MongoDB</v>container and let's make sure that data persists there,and that we limit the access.Just to clarify what the problem is.At the moment, if I Docker stop MongoDBand keep in mind that we currently have one goal.If I stop MongoDB and I then rerun it in the same wayas before it works and our application will be ableto talk to it, but the goal is gone.It's no longer there.And that happens because when we stop MongoDB,the container is removed, and when it's removed,all the data stored in the container is lost.And the data stored in the database, in the MongoDB databaseis stored in that container of course.So therefore here, we need to ensure that we detachthat data, which in the end is still writtento the hard drive.Databases also store data on a hard drive somewherethat that data survives container tear down and removal.And of course we learnedhow we can ensure that data survives.We can add a volume.We do this with the dash V flag,and then we just need to know which path the MongoDBcontainer uses internally for storing that database data.And of course, since this isn't our image,we don't know which path gets used internally,but we can of course look into the documentationof this Mongo container.And there we learn a lot about using this imageand how we can start it and so on,and we also learn that we can indeed use a volume there.And what we can see here is that internally,it seems to be this slash data slash DB folderin which MongoDB stores the database data,the database files inside of the container.Now here in this example, this gets mapped to a bind Mount,so to a local host machine folder which we know.This could be useful for being able to inspectthat database conveniently, but we actually don't needto do that just to persist data.Instead, all we need to do for that isas you'll learned in the Volumes and Data Storage section,a named volume.So we could name it data and bind this to data/db.Now that's not a bind mount because we don't have a fullpath to a local host machine folder.Instead we just assign a name and then we map thisto a path instead of the container.And as you learned, Docker will then create this volume,if it doesn't exist already and store any data writteninside of the container in that volume on the host machine,we just don't know where that is on the host machine.And if it does exist already, Docker will load the datathat's already in that folder on the host machine,into that folder in the container.And this then ensures that our data is never lost.So for now hit enter, I should first of allstop my MongoDB container of course,and then try this again and hit enterto start at MongoDB container again now with this volume.And that means that now one last time the data is lost,but if a learn Docker this is saved and persists,and now it even survives if I stop Mongo again.If I stop this container again, and I then rerun it,hence creating a new container, now, if I reload,you see the data is still there because of that volume.So that's our data surviving in the MongoDB container,which is one key requirement we had here.Now another requirement was securityand preventing access to our database.And for that the MongoDB image supportstwo environment variables, MongoINITDB root username,and MongoINITDB root password.And when we use these environment variables,then the database insert at the MongoDB container willbe created such that this usernameand password is required to access it.And that can of course be convenient because that can ensurethat we need to specify that username and passwordin our containers trying to access our database,which simply adds an extra layer of security.If we scroll up a bit further,we see a more detailed usage guide.So in the end, what we can do here is we can stopour MongoDB container again, and then run it againbut now by also adding an environment variable,and the first one which I want to add is MongoINITDBroot username and set it to a value of max, for example,in my case, and add a second environment variable,which is this MongoINITDB root password environmentvariable, which I will also set to secret here.Now that's of course not a secure username or password,but it is good enough here for development.With that if I hit enter, this now starts up.This container is now up and running.And if we now reload here, you see fetching data fails.And that fails because the node application,which talks to MongoDB,connected without that password and userand now that database is protected though.So now we need to ensure that in our app JS fileof our node backend,indeed we do utilize that password and usernamewe just used for starting the database.So max in my case and secret as a password.And for that we can manipulate this connection string a bitbecause this Mongo DB connection stringhas a special format which is understoodby MongoDB in the end,The format is such that we can have a username and password,which we add in front of the actual host address by havingusername then a colon, then password and then I add symbol.This is optional, but now we need it,since we now do have a username and a password.So in my case would be max:secret@mongodb.And with this now, if we rebuild the node imageand then restart the container,we should be able to connect again.So let's give this a try.Let's stop the goals backend container,which is our node application container here.And once this is stopped,let's build the goals node image again,because we changed the code in there.And once this was built again,let's run it again with the same configuration as before,but now this should connect to MongoDB.However, I see that it crashed.It's not up and running here.So it does not seem to connectto the MongoDB database successfully.We can find a solution in the official MongoDB docs,though, we need to add this off source equals adminquery parameter at the end of the connection string.So here at the end of this connection string I add?authsource=admin and if we now buildthis goals node image againwe can thereafter run this container successfully.If I enter, now you'll see we are connectedto MongoDB again.And with that of course,our front end application works again and our data is back.\"\n    },\n    {\n      \"title\": \"Volumes, Bind Mounts & Polishign the Node container\",\n      \"content\": \"<v Instructor>So with that, we added these two features</v>to the database, MongoDB container.Now, let's work on the node backend,and there we also wanna ensure that data persistsin this case, the log files, this container writes,and we wanna have life source code updatesso that when we change our source codein our local host project folder,the latest source code is also available in the container.For this, I'll first of all,stop my goals backend container again.So this node container, so that we can restart itwith a different configurationbecause we now also wanna add a volume there,or actually two volumes.We wanna run our goal backend with docker run,but we need volumes.We need one volume for the log files.Now we can go for a name volume to not knowwhere they are stored on the host machine,but to ensure that they survive container tear down,or we go for a bind mount so that we can also readthe log files from inside our hosting machine.Now you could do either way.I'll go for a named module here,so that we don't have easy access to these filesfrom the host machine,but just to practice using volumes again.And for that, I'll name this logsand bind this to /app/logs in the container./app is our working directoryas specified in the docker file.So that is where the entire application is copied to.And then we have the logs folder in thereto which this application writes the logsand therefore, it's /app/logs internallyin the container where logs are written toand that's there for the path we wanna bind to our volume.Now that's one volume, but we need another one,or to be precise, we need a bind mountwhich we also create with /v build.I wanna bind everything in the app folderto my local hosting directory here,simply to ensure that whenever I change somethingin my source code here,it's reflected inside of the container.Now for such a bind mount,you need the full path to your folder here,which you bind as a name to the container internal path.So, therefore, here, we can, for example, right-lickon app.js and copy the path and paste this in here.However, delete app.js at the end.So that I just paste the full path to backendand bind this to the internal app folder.Now also keep in mind what you learned about volumesand files overwriting each other in the container.Longer container internal paths have precedentsand overwrite shorter paths.So in the example of logs here,we already do ensure that logs written by the containerare not overwritten by the local logs folderin my local host project folder.So that's good. The logs in the container will survive.But we also learned that we should do something similarabout node modules to ensure that if we didn't havenode modules here on the local host machine,we don't overwrite the existing node modulesin the container with the non-existing ones here,which would cause our container to crashbecause dependencies would be missing.So therefore we should add another volume,and here we can simply use an anonymous oneand point at app node_modulesto basically tell the containerthat the existing node modules folderinside of the container should stay thereand should not be overwrittenby the non-existing node modules folderin our host machine folder, which we bind to the app folder.And I did talk about this in the volumes course section.So definitely make sure you go through that againin case this doesn't tell you anything.With that though, we should be startingthis node server here with our volumes added,and I'm again, going to run it in detached mode nowand start it.And it is up and running. So that's looking good.If I reload my application, my React application here,it also is still able to fetch data,and deleting all the words and adding again all the words,so that also is looking good.All is got no errors here in the developer tools.And that proves that indeed our containersare up and running successfully.Now, although the node container with our bind mountand the upper volumes, however, we're not done yet.Yes, we do put our latest source codefrom the local host folder into the node container,but currently that doesn't do muchbecause when we start the container,we run app.js with the node command,and that basically logs in the codeat the point of time this containers starts.The node process loads all the code,and then starts that code, so to say.So, if the code changes their author,this has no impact on the already running node server.And that's of course not what we want here.We want the node server to restartwhenever the code changes.Yes, we could stop and restart the container,that would do the trick, but even better than that,we can add the extra dependency to this project,which then actually will restart the serverautomatically for us when the code changes.For this, I'll delete package log JSON,and here in packaged.js, I'll add a new devDependencies nodebelow dependencies, and add nodemon here as a dependency,and I'll pick version 2.0.4.Nodemon is an extra tool,which I already covered early in the course,which watches the project folder for file changesin JavaScript files,and if such a JavaScript file does change,it restarts the node server.We just have to ensure that to utilize nodemon,we can do that by adding a start script hereto the scripts section.And there, I wanna run nodemon app.jsto use nodemon to run app.js,and under the hood nodemon uses node,but it restarts the node server whenever any JavaScript filein the project folder,so in this case, in the backend folder changes.So these are changes we need to make to package.js,in the docker file of the backend project,we now need to run this start script,and can start like this to utilize nodemon.And that of course now means that we need to stopour goals backend container,so there's node application container we started,and then restart it, but based on a rebuilt imagebecause we changed the docker file.So we built this goals node image again,and it installs all new dependencies ends onbecause the package.js file changedand thereafter, we can run this containerwith the same configuration as before.And if you'd run docker, PS,it should be up and running, and it is,but now it uses nodemon internally.And we can verify this by running docker logs goals-backend,which was our container name.Here, we see the nodemon log.And now if we change something in our code here,for example, here, when we say connected to MongoDB,I add two exclamation marks.If I save this and we log our goals back in logs again,we see it restarted because of changes,and we see that latest logand our application also still works.So now we also successfully provide life source code updatesto our node application with help of our bind mount.And in this case with help of nodemon,which watches for file changes and restarts the node serverwithout us being required to manually restart the container,which would be an option, but of course is less convenient.Now, there are two last things which I wanna tweakabout this node application.One is this connection string.I had coded username and password into this string here,but of course that means that whenever I change thatwhen I start my MongoDB container,so if I run MongoDB here with a different usernameor a different secret,which definitely is something that could happen,I need to change it in my code here, which is not horrible,but we could utilize environment variables hereto inject dynamic values here and actually setthe username and password we do usewhen we start this node container.And that's something I wanna do here.For data and the docker file,I'll add environment variables with the nth instruction,and I'll add one which will name MONGODB_USERNAME.The name is totally up to you here,and I'll set this to a default value of root,and add a second one, which I'll name MONGODB_PASSWORD,which I'll set to secret as a default value.Now these environment variables are availablein the container environment and also in the running code.Now in app.js, we can utilize that.I wanna replace max with the values storedin the username environment variableand use the password environment variable to getto the value for the password and disconnection string.To conveniently add this in JavaScript,we can replace these single quote here with a backtick,which is a different character on your keyboardand do that all at the end of the string here.And that's just a special JavaScript syntax,has nothing to do with docker,which makes injecting dynamic values into a string easier.Now we can add dollar sign curly braces here,and then add a dynamically resolved value here,which is then combined into one long string.And here it's process.env, and then MONGODB_USERNAME.And here you should make sure that you really usethe exact same environment variableas you specified in docker file,and do the same here for the password,dollar sign curly braces, which is just JavaScript syntax,has nothing to do with docker and then process.env,and then here it's MONGODB_PASSWORD,which I wanna access.And now these values will be injected dynamically,and we can set them when the container starts.So therefore here, I'll now stop my goals backend container,this node application container,and then I wanna restart it with specific values passedfor these environment variables.The default values will not work because of root and secretare not the username and password I choseon my MongoDB database.There, I did choose max as a username, not root.So therefore, when I read on this container now,I will add an environment variable here, for example,with -d, and set MONGODB_USERNAME equal to max.We could also set MONGODB_PASSWORD to a different value,but here in my case,the default value I assigned will actually work.And of course I could have also used maxas a default value here,and we wouldn't need to set any environment variableat all then, but I also want to practice againhow we set our own environment variables.So with that, this should not work.And if we inspect the logs of this container,we see authentication failed.And the reason for that can be found in the docker file.We should assign a default value like thiswith an equal sign.My bad.We should add the default value like thiswith an equal sign.And if we do that, we can now stop the goals backend,so this running container,and since we changed the docker file, again,rebuild the image to pick up this latest docker file.So rebuild the image with docker build goals-nodeand then run the container againwith our MONGODB_USERNAME being set, but not the password.And if we do this,we can again, look into the logs here,and now you see this connected.And hence, if I reload here,this application also again works.So that is working here, and that's how we can addour own environment variables.Now with the environment variables out of the way,there is one last thing I wanna take care of.At the moment, thanks to the stalker file,I copied everything from this backend folderinto the container, after the dependencieshave been installed in there.This is okay, but there are files I'm copyinginto the container, which I might not wanna copy in here.And for that, I'll add a .dockerignore file.I also covered this earlier in the course already.Here, I, for example, want to exclude node modules.If I had this folder here,I'll also exclude the docker file itselfand exclude a .git folder if it should exist.And these are some folders which are now simply won't copyinto the existing container,and the node modules folder is the most important onesimply to ensure that I'm not unnecessarily copyingall my dependencies again after I already did install theminside of the container.And that is now really all.Now, if we would rebuild the image,we would ensure that the image gets builtwithout these redundant files being copied in.And we now have our node applicationwhere we can change the codeand it will be picked up automaticallyand where we also use environment variables.So therefore, let's now move on to the React application.\"\n    },\n    {\n      \"title\": \"Live source code update for the react container (with bind mounts)\",\n      \"content\": \"<v Instructor>So now that we finished the MongoDB</v>and the backend container,let's also talk about the frontend container again,the React single-page application here.Here, we also want to have live source code updatesso that if I change something in my source code,it's automatically reflected in the running container.For this, I'll go to the terminalwhere my front-end Docker container is running.And with Control + C, we can exit out of there.Control + C works hereand not in a Node container, by the way,because we started this container with the dash it optionfor interactive access.And with that, we now, well, finished that containerand it also was removed.We only have the node, the backend,and the MongoDB container running now.So now I wanna start this container,this frontend container,such that my source code is provided in thereand changes are picked up automatically.And that of course, screams for a bind mount.I don't need any data persistence or anything like that,but that bind mount would be nice to have.So therefore we want to run our container with docker run,but with dash v, I also wanna bind a volume, a bind mount,and I wanna bind it to the app folder in the container,because in this frontend Docker file,we also have a working directory of app.But we don't need to bind the entire folder.We can just bind the source folderbecause it actually is the source folderin which we have our React code on which we typically work.So I wanna bind to the app source folderand I wanna bind it to my local host machine path.So let's get to this path by copying itfrom some file in that source folderin the frontend project folder,pasting this in here,adding a colon thereafter, and let's remove that file name.And now I bind that source folder hereto the source folder in the container.And that should allow the containerto always be aware of the latest code changes.Now we don't need node mod herebecause the development server this project usesis already configured to react to file changesand rebuild the application.So here we don't need any extra dependencybecause this project set up already usessuch a watch the files and reload service.Hence, if I now hit Enter,this should start this application,it should start this development server.Hence we can reload here, but now if I change something,for example, in the components folder, goals, CourseGoals,if I add a h2 tag here above my cardin this course goals section, and I say, your goals.If I save this, you see, it recompiled down thereand we see your goals here.Okay, the styling is really off here,but it's there at least.We can see it better if I move it into this card component.By the way, if you don't know React code,that's no problem,you can just add this h2 tag in card, save this,and here we go.Now I got another note for Windows users,a note which I also had earlier in the course.You might see that when you change a filein your Docker container,the development server does not reloadand does not pick up these file changes.This happens if you are using Windows with wsl 2to run Docker.Now I attached to find a link to an articlewhere you learn how to use the Linux file systemon your Windows machineinstead of the regular Windows file system.And you should create your project and your project filesin that Linux file systeminstead of the Windows file system,because then these changes will be picked upby the Docker container.So follow the steps in the article,which you find attached,create your project in that Linux file systemand use Docker there.And then everything should work as shown in the lectures.So, this now works,and now we got this live reloadand live source code reflectionin our frontend application as well.The last thing I wanna do hereis something related to our image building process.I already mentioned that it takes quite longfor this frontend application.Part of the reason is that we have more dependencies hereand therefore NPM install simply takes longer.But another reason for that taking longeris that we copy everything in our folder into the containerafter NPM install.And here I still have Node modules lying aroundlocally on my host machine.So therefore this also gets copied into the container again,and that takes very long.It's unnecessary because we already created itin the container with NPM install.And it even has the dangerof copying in an outdated Node modules folder,not using the latest dependencies,which might've been installed by NPM install.Of course we can delete Node modules here,but maybe we're also sometimes workingon this project locally,and therefore we need it here as well.The solution then again is a Docker ignore file.In there, we can, again, specify Node modulesas a to be ignored folder,maybe also dot git and also the Docker file itself.And if we do that, if we add this file,image creation should be faster.And we can test this by quitting this serverwith Control + C, this container.And then let's rebuild this image,with Docker build dash t goals-react.If I hit Enter, this now was way faster than before,because we did not copy inthis unnecessary Node modules folder.And now if I start this, it of course also still works,so that does not change.Here it is up and running, and everything works.And that is how we can also optimizethis frontend Docker container a bit.\"\n    }\n  ]\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        -140
      ],
      "id": "9e6043bf-f508-4b64-b96a-ac95d0ab94bb",
      "name": "Json"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "data": "={{ \n  {\n  \"theme\": $('Set Variables').item.json.theme,\n  \"chapter\": $('Set Variables').item.json.chapter,\n  \"transcripts\": $('Set Variables').item.json.transcripts,\n  \"summaries\": []\n  }\n}}",
            "pageId": "={{ $json.id }}",
            "jobType": "initiate"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "pageId",
              "displayName": "pageId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "jobType",
              "displayName": "jobType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1980,
        -140
      ],
      "id": "bc1b0ceb-3a42-48aa-b998-cf40657a667a",
      "name": "Initiate UdemySummary"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "pageId"
            },
            {
              "name": "data",
              "type": "object"
            },
            {
              "name": "jobType"
            }
          ]
        }
      },
      "id": "8a1b7010-d07b-4ff5-b828-75ff471a1848",
      "name": "UdemySummary Subworkflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -20,
        940
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d88bfe95-9e73-4d25-b45c-9f164b940b0e",
              "name": "transcript",
              "type": "object",
              "value": "={{ $('JobType Router').first().json.data.transcripts[$json.currentStep] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "35d089ff-4ee6-458e-9354-5c440aa4357c",
      "name": "Set Next Transcript",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "acb41e93-70c6-41a3-be0f-e5a74ec3ec88",
              "name": "theme",
              "type": "string",
              "value": "={{ $json.data.theme }}"
            },
            {
              "id": "d4f2b39e-2bb5-42aa-8f9b-b866a41b56fb",
              "name": "chapter",
              "value": "={{ $json.data.chapter }}",
              "type": "string"
            },
            {
              "id": "60c4474d-a949-4488-9dd3-11de5cfa6c29",
              "name": "transcript",
              "value": "={{ $('JobType Router').first().json.data.transcripts[0] }}",
              "type": "object"
            },
            {
              "id": "7fc54063-b610-42bc-a250-b1e8847c4d1e",
              "name": "summaries",
              "type": "array",
              "value": "={{ $('JobType Router').first().json.data.summaries }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7c559504-4c6f-4ae3-a33b-41bec408adc1",
      "name": "Set Initial Transcript",
      "type": "n8n-nodes-base.set",
      "position": [
        820,
        340
      ],
      "typeVersion": 3.4,
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        820,
        -140
      ],
      "id": "23340538-d80c-4d05-a896-89ce140a0991",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "path": "f0529faf-3a5a-42c2-8d4b-9981fcfdcf7f",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        820,
        -340
      ],
      "id": "b895ace4-1864-458c-9878-2a65228b59e6",
      "name": "Webhook",
      "webhookId": "f0529faf-3a5a-42c2-8d4b-9981fcfdcf7f",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Liste des résumés sur lesquels tu dois performé le contrôle et le formatage:\n{{\n  $('JobType Router').first().json.data.summaries &&\n  `<summaries>\n    ${$('JobType Router').first().json.data.summaries.map(summaryItem => \n      `<step>${summaryItem.step}</step>\n        ${summaryItem.summary.map(item => \n          `<summary>\n            <model>${item.modelName}</model>\n            <content>${item.content}</content>\n          </summary>`\n        ).join('\\n')}`\n    ).join('\\n')}\n  </summaries>`\n}}\n",
        "messages": {
          "messageValues": [
            {
              "message": "=# Agent de Contrôle et Formatage des Résumés de Vidéos Udemy\n\n## Contexte\nTu es un agent spécialisé dans l'analyse, la fusion et le formatage des résumés de leçons Udemy générés par deux modèles d'IA différents (GPT et Claude). Ces résumés suivent une structure prédéfinie section par section pour définir une fiche complète.\n\n## Objectif\nCréer une version unifiée, non-redondante et correctement formatée du résumé de leçon en exploitant les meilleures contributions de chaque modèle pour chaque section.\n\n## Donées d'entrée\nTu recevras une collection de résumés structurés comme suit:\n```json\n{\n  \"theme\": \"Thème général de la leçon\",\n  \"chapter\": \"Titre du chapitre\",\n  \"summaries\": [\n    {\n      \"step\": \"Numéro de l'étape\",\n      \"summary\": [\n        {\n          \"model\": \"Nom du modèle (gpt/claude)\",\n          \"content\": \"Contenu du résumé\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Instructions\n\n### 1. Analyse et sélection du contenu\nPour chaque section du résumé:\n- Compare et fusionne les versions de GPT et Claude\n- Sélectionne les éléments les plus pertinents et complets\n- Évite les redondances\n- Assure une transition fluide et un style cohérent\n\n### 2. Fusion intelligente\n- Ne te contente pas de concaténer les informations, mais fusionne-les de manière cohérente\n- Préserve les informations distinctives et complémentaires de chaque source\n- Assure une transition fluide entre les éléments de différentes sources\n- Maintiens un ton et un style cohérents dans l'ensemble du document\n\n### 3. Formatage Markdown\n- Utilise le format Markdown de manière rigoureuse:\n  - Sections principales (H1) avec `#` pour les grandes étapes et sont numérotés avec l'étape en cours\n  - Sous-sections (H3) avec `###` pour les détails de chaque partie (si présent)\n  - Listes à puces `-` pour les concepts et idées clés\n  - Bacticks (``) -> Pour les termes techniques\n  - Bloc de code → Pour illustrer par des exemples\nExemple de titre:\nSi je suis dans le <step>1</step> et que <content>#Introduction\\n\\n...</content>\nAlors j'attends \"#1. Introduction\"\n\nPour les exemples de code:\n- Si un **exemple de code** est mentionné, fournis-le **dans un bloc de code Markdown (` ``` `)**.  \n- **Langage du code** → vérifie qu'il soit dans la liste des langages supportés par Notion: abap, agda, arduino, ascii art, assembly, bash, basic, bnf, c, c#, c++, clojure, coffeescript, coq, css, dart, dhall, diff, ebnf, elixir, elm, erlang, f#, flow, fortran, gherkin, glsl, go, graphql, groovy, haskell, hcl, html, idris, java, javascript, json, julia, kotlin, latex, less, lisp, livescript, llvm ir, lua, makefile, markdown, markup, matlab, mathematica, mermaid, nix, objective-c, ocaml, pascal, perl, php, plain text, powershell, prolog, protobuf, purescript, python, r, racket, reason, ruby, rust, sass, scala, scheme, scss, shell, smalltalk, solidity, sql, swift, toml, typescript, vb.net, verilog, vhdl, visual basic, webassembly, xml, yaml, notionscript.\n- IMPORTANT: Pour le code Docker, utilise TOUJOURS \"bash\" comme identifiant de langage, JAMAIS \"dockerfile\".\n- Si tu ne sais pas quoi mettre utilise shell ou bash par défaut.\n- **Exemple** :\n  ```python\n  def hello_world():\n      print(\"Hello, World!\")\n  ```\n\n### 4. Vérification finale\n- Assure-toi que toutes les sections sont présentes et substantielles\n- Vérifie que le formatage Markdown est correct et cohérent\n- Garantis que le document final est bien structuré, informatif et agréable à lire\n- Élimine toute redondance ou répétition inutile\n- Le titre principal commence par un seul # et contiennent le numéro de l'étape\n- Les points clés sont listés directement avec des tirets (-) sans titre \"Points Clés\" ou \"### Points Clés\"\n- Les exemples de code sont inclus directement dans des blocs de code (```) sans titre \"Exemples de Code\"\n- Les termes techniques avec des backticks (``)\n\n## Format de sortie\nFournis uniquement le résumé final en Markdown correctement formaté, sans ajouter de commentaires ou d'explications sur le processus utilisé."
            }
          ]
        }
      },
      "id": "95223fbd-d1c8-404d-8fc7-925a28339e23",
      "name": "UdemySummary Control",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        820,
        1460
      ],
      "typeVersion": 1.5
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-02T11:12:34.000Z",
  "versionId": "d8864f1b-9ba4-4686-9cf3-838cca175eb3"
}